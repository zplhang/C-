Git
	分布式版本管理系统
	安装
		Linux/unix
			sudo apt-get install git
		Mac
			1, 安装homebrew，通过homebrew安装Git
			2, 从AppStore安装Xcode，Xcode集成了Git，默认没有安装，需要运行Xcode选择Preferences -> Downloads -> Command Line Tools -> Install
		Windows
			安装msysgit（Windows版的Git）
	设置
		git config --global user.name "xxx"
		git config --global user.email "xxx@xx.com"
	创建版本库
		1，创建一个空目录
			mkdir learngit
			cd learngit
			注意：如果使用Windows系统，确保目录中不包含中文。
		2，把此目录变成Git可以管理的仓库
			git init
		建议所有文件都用UTF-8编码
	将文件放入Git仓库
		1，把文件添加到仓库
			git add readme.txt
		2，把文件提交到仓库
			git commit -m "本次提交的说明"
	查看仓库当前的状态(是否提交，是否修改)
		git status
	查看具体修改了什么
		git diff readme.txt
	版本回退
		查看从最近到最远的提交历史记录
			git log
			git log --pretty=oneline
		回退到上一个版本
			git reset --hard HEAD^
				HEAD表示当前版本，上一个版本是HEAD^,上上个版本是HEAD^^,...,往上100个版本是HEAD~100
		回到未来的某个版本
			git reset --hard xxx(commit id,提交版本号，可以不写全)
		查看每一次命令记录
			git reflog
	工作区和暂存区
		工作区
			电脑里能看到的目录，如learngit文件夹
		版本库
			隐藏目录.git，不是工作区，是Git的版本库
			版本库里存了很多东西
				暂存区stage或index
				Git自动创建的第一个分支master
				指向master的一个指针HEAD
		暂存区
			stage（或者index）
			git add把文件添加进去，实际上是把文件修改添加到暂存区；
			git commit提交更改，实际上是把暂存区的所有内容提交到当前分支（master）。
	撤销修改
		丢弃工作区的修改
			git checkout -- readme.txt
			两种情况
				1，修改后还没有被放到暂存区，撤销修改就回到和版本库一致的状态
				2，已经添加到暂存区后又做了修改，撤销修改就回到添加到暂存区后的状态
		撤销暂存区的修改，重新放回工作区
			git reset HEAD readme.txt
			git reset既可以回退版本，也可以把暂存区的修改回退到工作区。使用HEAD表示最新的版本。
			
		总结：
			1，当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
			2，当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步,
				第一步，用命令git reset HEAD file，就回到了1
				第二步，按1操作
			3，当已经提交了不合适的修改到版本库时，想要撤销本次提交，使用版本回退(git reset --hard xxx)，不过前提是没有推送到远程库。
	删除文件
		在工作区删除
			rm readme.txt
			此时工作区和版本库就不一致，有两个选择：
				1，确实要从版本库中删除，使用git rm，然后git commit
					git rm test.txt
					git commit -m "remove file"
				2，删错了，可以很轻松地把误删的文件恢复到最新版本
					git checkout -- test.txt
	远程仓库
		使用GitHub作为远程仓库服务器
			1，注册GitHub账号
			2，在本地创建SSH Key
				ssh-keygen -t rsa -C "xxx@xx.com"
				主目录里.ssh目录里面有id_rsa(私钥)和id_rsa.pub(公钥)两个文件
			3，登录GitHub，在settings -> SSH keys -> Add SSH Key,填上title，Key文本框里粘贴id_rsa.pub文件的内容
			注意：在GitHub上免费托管的Git仓库，任何人都可以看到
		添加远程仓库
			1，登录GitHub -> Create a new repo按钮，创建一个新的仓库learngit
			2，在本地仓库下运行
				git remote add origin git@github.com:xxx/learngit.git(xxx是GitHub账户名)
			3，把本地库的所有内容推送到远程库上
				git push -u origin master(实际上是把当前分支master推送到远程)
				第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
				git push origin master
		从远程库克隆
			git clone git@github.com:xxx/hello-world.git
			GitHub支持多种协议(SSH,HTTPS...),还可以用https://github.com/michaelliao/gitskills.git这样的地址
			默认的git://使用ssh
			https除了速度慢，每次推送都必须输入口令；但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https
		
	分支管理
		创建分支
			创建dev分支并切换到dev分支
				git checkout -b dev(-b表示创建并切换)
				相当于
					git branch dev
					git checkout dev
			查看当前分支
				git branch(列出所有分支，当前分支前标上*)
			切换回master分支
				git checkout master
		合并分支
			将dev分支的修改合并到master分支
				git merge dev(合并指定分支到当前分支)
		删除分支
			合并完成后，可以删除dev分支
				git branch -d dev
			查看当前分支，只剩下master分支
				git branch
		解决冲突
			1，准备新的feature分支
				git checkout -b feature
			2，修改ReadMe.txt文件
				加上一句”Creating a new branch is quick and simple“
			3，在feature分支上提交
				git add ReadMe.txt
				git commit -m "and simple"
			4，切换到master分支
				git checkout master
			5，在master分支上修改ReadMe.txt文件
				加上一句”Creating a new branch is quick & simple“
			6，在master分支上提交
				git add ReadMe.txt
				git commit -m "& simple"
			7，此时合并分支，出现冲突
				git merge feature
			8，查看冲突文件，手动解决冲突，再次合并
				都改成”Creating a new branch is quick and simple“
				git add readme.txt 
				git commit -m "conflict fixed"
			9，用带参数的git log查看分支合并情况
				git log --graph --pretty=oneline --abbrev-commit
			10，删除feature分支
				git branch -d feature
		分支管理策略
			通常合并分支，Git采用Fast forward模式。这种模式下，删除分支后，会丢掉分支信息。
			如果强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
			使用--no-ff方式(禁用Fast forward模式)的git merge
			1，创建并切换分支dev
				git checkout -b dev
			2，修改test.txt文件并提交
				git add test.txt
				git commit -m "add merge"
			3，切换回master分支，使用--no-ff方式合并
				git checkout master
				git merge --no-ff -m "merge with no-ff" dev
			4，使用git log 查看分支历史
				git log --graph --pretty=oneline --abbrev-commit
		Bug分支
			当接到修复一个代号为101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它
			但是，当前正在dev上进行的工作还没有提交，工作只进行到一半，还没法提交，怎么办？
			Git提供了一个stash功能，把当前工作现场“储藏”起来，等以后恢复现场后继续工作
			1，目前在dev分支，保存现场
				git stash
			2，确定在哪个分支上修复bug，假定在master分支，创建并切换bug分支
				git checkout master
				git checkout -b issue-101
			3，修复bug，添加并提交
				git add test.txt
				git commit -m "fix bug 101"
			4，切换回master分支，完成合并，删除issue-101分支
				git checkout master
				git merge --no-ff -m "merged bug fix 101" issue-101
				git branch -d issue-101
			5，切换到dev分支，查看工作现场，恢复现场
				git checkout dev
				git stash list
				两种恢复方式：
					(1), git stash apply(恢复后，stash内容并不删除，用git stash drop来删除)
					(2), git stash pop(恢复的同时把stash内容也删了)
				多次恢复
					先用git stash list查看
					再恢复指定的stash，git stash apply stash@{0}
		Feature分支
			软件开发中，总有无穷无尽的新的功能要不断添加进来。
			添加一个新功能时，不希望因为一些实验性质的代码，把主分支搞乱了
			所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
			1，创建并切换到feature分支
				git checkout -b feature-vulcan
			2，开发完毕，添加提交
				git add vulcan.py
				git commit -m "add feature vulcan"
			3，切回dev，准备合并，此时未合并，删除feature分支
				git checkout dev
				git branch -d feature-vulcan
				删除失败，Git提示feature-vulcan分支还没有合并，如果删除将丢失修改；如果强行删除，使用git branch -D feature-vulcan
			4， 强行删除分支
				git branch -D feature-vulcan
		多人协作
			查看远程库的信息
				git remote
				git remote -v(查看远程库的详细信息)
			推送分支
				从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
				将dev分支推送到远程库
					git push origin dev
			抓取分支
				如果从本地推送失败，先用git pull 抓取远程的新提交
				如果有冲突，要先处理冲突
				在本地创建和远程分支对应的分支，本地和远程分支名称最好一致
					git checkout -b branch-name origin/branch-name
				建立本地分支和远程分支的关联
					git branch --set-upstream branch-name origin/branch-name
			多人协作的工作模式
				1，可以试图git push origin branch-name推送自己的修改
				2，如果推送失败，则因为远程分支比本地新，需要先用git pull试图合并
				3，如果合并有冲突，则解决冲突，并在本地提交
				4，没有冲突或解决冲突后，再用git push origin branch-name推送
				5，如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name
	标签管理
		发布版本时，通常先在版本库中打一个标签(tag)，唯一确定了打标签时刻的版本。
		标签是版本库的快照，其实它就是指向某个commit的指针，所以，创建和删除标签都是瞬间完成的
		tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
		与分支区别：tag不能移动，分支可以移动
		创建标签
			1，切换到需要打标签的分支上
				git branch
				git checkout master
			2，打上新标签
				git tag V1.0
		查看所有标签(按字母顺序列出，不是按时间顺序列出)
			git tag
		默认标签打在最新提交的commit上，如何给历史commit打标签？
			先找到历史commit的id，然后打上标签
			git log --pretty=oneline --abbrev-commit
			git tag V0.9 XXX(commit id)
		查看标签信息
			git show V0.9
		创建带有说明的标签
			git tag -a V0.2 -m "version 0.2 released" xxx(commit id)
		创建带私钥签名的标签(签名采用PGP签名，必须首先安装gpg)
			git tag -s V0.2 -m "signed version 0.2 released" xxx(commit id)
		操作标签
			删除标签
				git tag -d v0.1
			推送标签到远程
				git push origin v0.1
			一次性推送全部尚未推送的本地标签
				git push origin --tags
			从远程删除标签
				1，先删除本地标签
					git tag -d v0.9
				2，然后从远程删除
					git push origin :refs/tags/v0.9
	使用GitHub
		访问开源项目的主页，Fork，在自己账户下克隆一个仓库，然后在自己的账户下clone。
			git clone git@github.com:xxx/xxxx.git
		一定要在自己的账号下clone仓库，这样才能推送修改。如果从作者的仓库地址克隆，没有权限，不能推送修改。
		可以在GitHub上发起一个pull request，给官方仓库贡献代码。但是，对方是否接受你的pull request就不一定了。
	忽略特殊文件
		有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们(比如保存了数据库密码的配置文件)，每次git status都会显示Untracked files ...
		在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件
		编辑好后将.gitignore文件提交到Git，可以对.gitignore文件做版本管理
		注意：有时候想添加一个文件到Git，发现添加不了，原因是该文件被.gitignore忽略了。
		如果确实想添加该文件，可以使用-f参数强制添加
			git add -f xxx.class
		可以使用git check-ignore命令检查.gitignore哪个规则忽略了文件
			git check-ignore -v xxx.class
	配置别名
		有些命令太长不好记，可以使用别名
			git config --global alias.st status (git status可以用git st代替)
			git config --global alias.co checkout
			git config --global alias.ci commit
			git config --global alias.br branch
			git config --global alias.unstage 'reset HEAD'(撤销暂存区的修改)
			git config --global alias.last 'log -1'(显示最近一次的提交)
			git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
			
	搭建Git服务器
		需要准备一台运行Linux的机器
		1，安装git
			sudo apt-get install git
		2，创建一个git用户，用来运行git服务
			sudo adduser git
		3，创建证书登录
			收集所有需要登录的用户的公钥(他们自己的id_rsa.pub文件)，把公钥导入/home/git/.ssh/authorized_keys文件里，一行一个。
		4，初始化Git仓库
			选定一个目录作为Git仓库，假定是/srv/sample.git
			在/srv下输入命令：sudo git init --bare sample.git 创建一个裸仓库，没有工作区
			将owner改为git用户：sudo chown -R git:git sample.git
		5，禁用shell登录
			出于安全考虑，不允许git用户登录shell，可通过编辑/etc/passwd文件完成
			找到类似 git:x:1001:1001:,,,:/home/git:/bin/bash，改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
			这样git用户可以正常通过ssh使用git，但不能登录shell
		6，在各自的电脑上，克隆远程仓库
			git clone git@server:/srv/sample.git
		要方便管理公钥，使用Gitosis
		要像SVN那样控制权限，使用Gitolite
	
	附录
		Git Cheat Sheet中文版.pdf
		Git Cheat Sheet.pdf